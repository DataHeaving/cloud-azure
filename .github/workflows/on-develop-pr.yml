# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: CI Pipeline

on:
  pull_request:
    branches:
    - develop
    paths:
    # Trigger only when there are changes to any code (as opposed to READMEs etc)
    - 'identity/**'
    - 'storage-blob/**'
    - 'kv-secret/**'
    - 'storage-queue/**'
    - '!identity/README.md'
    - '!storage-blob/README.md'
    - '!kv-secret/README.md'
    - '!storage-queue/README.md'
    - '.codecov.yml'
  push: # Run this pipeline also after merging to develop, to report code coverage to codecov for this branch
    branches:
    - develop

jobs:
  build_and_test:
    strategy:
      matrix:
        dir: [ identity, storage-blob, kv-secret, storage-queue ]
    runs-on: ubuntu-latest
    name: Build and test ${{ matrix.dir }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - id: build
        name: Build and test ${{ matrix.dir }}
        shell: bash
        run: |
          set -e

          cd ${{ matrix.dir }}
          npm ci
          npm run build

          # We must invoke tests via Docker, otherwise we will get an error claiming that port for another Docker container running in parallel is already allocated.
          # Not sure if this is GH or Docker bug, but nevertheless it is fixed by putting Node itself into Docker container when running tests.
          whereis docker
          # cat /usr/bin/docker || echo 'FAIL1'
          # cat /etc/docker || echo 'FAIL2'
          # cat /usr/libexec/docker || echo 'FAIL3'
          echo 'FROM node:14-alpine3.13
            RUN apk update \
              && apk add --no-cache docker-cli \
              && npm install -g npm' | docker build -t this_node -
          docker network create this_nw || echo 'Most likely Docker network was created by another matrix runner'
          function npm_docker()
          {
            docker run \
              --rm \
              -v "$(pwd)/:/code/:rw" \
              -v '/var/run/docker.sock:/var/run/docker.sock' \
              --entrypoint npm \
              -w /code \
              --env MVM_CONTAINER_NW='this_nw' \
              --env AZURE_STORAGE_QUEUE_DOCKER_NW='this_nw' \
              --network this_nw \
              this_node \
              "$@"
          }
          npm_docker run test
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.dir }}
          directory: ${{ matrix.dir }}