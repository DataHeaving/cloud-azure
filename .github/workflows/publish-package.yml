name: CD Pipeline

on:
  push:
    branches:
    - main

jobs:
  publish:
    strategy:
      matrix:
        dir: [ identity, storage-blob, kv-secret, storage-queue ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - id: publish
        name: Publish ${{ matrix.dir }}
        shell: bash
        run: |
          set -e

          CURRENT_BRANCH="${GITHUB_REF#refs/heads/}"
          if [[ "${CURRENT_BRANCH}" != "main" ]]; then
            echo 'This action can only be run on main branch!' 1>&2
            exit 1
          fi

          cd ${{ matrix.dir }}
          PACKAGE_VERSION="$(cat package.json | jq -rM .version)"
          GIT_TAG_NAME="${{ matrix.dir }}-v${PACKAGE_VERSION}"
          if [[ -n "$(git ls-remote --tags origin "${GIT_TAG_NAME}")" ]]; then
            # Tag already exists, meaning release has been done, so don't do anything here anymore
            echo "Detected that tag ${GIT_TAG_NAME} already is created, not proceeding"
            exit 0
          fi

          npm ci
          npm install --no-save @jsdevtools/npm-publish
          # We must invoke tests via Docker, otherwise we will get an error claiming that port for another Docker container running in parallel is already allocated.
          # Not sure if this is GH or Docker bug, but nevertheless it is fixed by putting Node itself into Docker container when running tests.
          # It also looks like docker images built in other jobs are not preserved to this job - so we need to build Docker image + create network on every run
          echo 'FROM node:14-alpine3.13
            RUN apk update \
              && apk add --no-cache docker-cli \
              && npm install -g npm' | docker build -t this_node -
          docker network create this_nw
          cd ..
          docker run \
            --rm \
            --entrypoint sh \
            -v "$(pwd)/:/code/:rw" \
            -v '/var/run/docker.sock:/var/run/docker.sock' \
            -v "$(pwd)/_npm/${{ matrix.dir }}/:/root/.npm/:rw" \
            --workdir '/code/${{ matrix.dir }}' \
            --env MVM_CONTAINER_NW='this_nw' \
            --env ASQ_DOCKER_NW='this_nw' \
            --network this_nw \
            this_node \
            -c \
            './node_modules/.bin/npm-publish --access public --token ${{ secrets.NPM_TOKEN }}'

          # TODO we must generate release notes for the package
          # TODO set up organization-wide CICD-GitHub account
          git config --global user.email "cd-automation@dataheaving.project"
          git config --global user.name "CD Automation"
          git tag \
            -a \
            -m "Component ${{ matrix.dir }} release ${PACKAGE_VERSION}" \
            "${GIT_TAG_NAME}"
          git push origin "${GIT_TAG_NAME}"
